==============================================================================
Color templates				*color-templates* *ft-colortemplate*

A colortemplate file is designed to help users create their own colorschemes
without much effort. It can also be used to create colorschemes suitable for
distribution with Vim. Colorschemes created using a colortemplate have the
following features:

- they support 256-color terminals, true color terminals and GUI Vim;
- they allow the user to set a transparent background;
- they are not over-engineered (very few options) and they load efficiently;
- they have a consistent structure and they are guaranteed to follow best
  practices;
- they can be easily customised by the user;
- they are automatically licensed under the Vim license.

To get started quickly, |:edit| `templates/dark_template.txt`, which is
located in colortemplate's plugin folder, and type:
>
  :Colortemplate ~/.vim/colors/dark_template.vim
<
(You must create the `~/.vim/colors` directory if it does not exists yet.)
This will open a new tab with the colorscheme derived from the template and
will save it into the specified path. After that, you may load the colorscheme
with:
>
  colorscheme dark_template
<
(The template uses only black and white, so it is not an outstanding theme.)

You may use `dark_template.txt`, `light_template.txt` or
`dark_and_light_template.txt` as starting points for creating your own
colorscheme. The process is divided in four steps:

1. start by editing your colorscheme's information;
2. define a color palette;
3. define the necessary highlight groups;
4. generate your colorscheme with `:Colortemplate`.

Information about the colorscheme consists of the following mandatory and
optional fields:
>
  # Mandatory information
  Full name:   A unique and attractive name
  Short name:  all_lowercase_with_no_spaces
  Author:      Myself <myself@somewhere.org>
  Maintainer:  Myself <myself@somewhere.org>
  
  # Optional information
  Website:     http://mysite.org
  Description: A one line description
  License:     Public domain
<
Color definitions consist of lines with the following form:
>
  Color: <name> <GUI spec> <base-256 spec> <base-16 spec>

For example:
>
  Color: white  #ffffff  206  White
<
Color name definitions may be overridden later in the file by another `Color`
directive using the same color name.

The color name is an arbitrary string (only letters, numbers and underscore
allowed). Give each color a distinctive name. GUI color specifications may be
given as hexadecimal values, as in the example above, or as RGB values:
>
  Color: white  rgb(255,255,255)  206  White
<
Base-256 specifications are used in terminals supporting 256 colors but not
true colors, or when |termguicolors| is not set. Base-16 colors should be
given as color constants (see |cterm-colors|). They are not used unless you
set |g:colortemplate_use16| to 1 before executing the |Colortemplate| command,
in which case base-256 numbers are ignored and base-16 colors are used
instead. You should not set |g:colortemplate_use16|, unless you are working
with a legacy colorscheme. You may define as many or as few colors as you
like.

In general, only the GUI value is mandatory. Base-256 values may be replaced
by a `~` symbol, which means that the color should be computed automatically
based on the GUI value. So, a minimal color definition might look as follows:
>
  Color: black #000000 ~
<
It is recommended that you let Colortemplate compute the best color
approximations, and override the automatically generated values only if
necessary. Colortemplate includes a "color similarity table" in the output,
which contains a detailed summary of the generated values, i.e., comments like
the following:
>
 " red: GUI=#9e0006/rgb(158,0,6) Term=88 #870000/rgb(135,0,0) [delta=4.473285]
<
Here, the delta value is the distance between the GUI value (`#9e0006`) and
the corresponding terminal color (`88`). The used distance is a sophisticated
variant of the CIELAB ΔE* metric, which takes into the account the perceptual
characteristics of the human eye. Besides, Colortemplate provides a few
utility functions to help you find other good (but not optimal in the sense of
ΔE*) approximations: see |colortemplate-functions|.

Highlight group definitions consist of lines with the following form:
>
  <Group name> <foreground color> <background color> <style attributes>
<
For example:
>
  SpellRare  white  black  bold,reverse  guisp=cyan
<
Colors must be specified using the color names defined in the `Color`
directives. You may also define alternative colors to be used with
a transparent background. For example, the following definition:
>
  LineNr white black/none
<
generates two commands: one (white foreground, black background) is used when
the background is opaque and the other (white foreground, no background) when
the user sets a transparent background.

To use a transparent background, set |g:<colorscheme>_transp_bg| to 1, where
`<colorscheme>` is the name of your colorscheme, before loading the
colorscheme.

The <style attributes> part of a highlight group definition is used to specify
comma-separated lists of attributes (see |attr-list|) and the special color to
use in the GUI. Both parts are optional, so these are also valid highlight
group specifications:
>
  Normal    white   black
  DiffAdd   orange  blue   reverse
  SpellBad  white   black  guisp=red
<
The foreground and background colors must always be present. You may use the
special values `fg`, `bg`, and `none` for the default foreground color, the
default background color and for disabling the corresponding highlighting,
respectively.

Attributes specified as above are used for both |cterm| and |gui|
highlighting. If you want to use different values for the terminal and the
GUI, you must prepend `term=` or `gui=`, respectively, as is done in Vim color
schemes. For example:
>
  IncSearch  white  black  term=bold,reverse  gui=bold,standout
<
`term=` may be abbreviated `t=`, and `gui=` may be abbreviated `g=`. Instead
of `guisp=`, you may also use `s=`.

Linked groups are defined using the following syntax:
>
  <SourceGroup> -> <TargetGroup>

For example:
>
  QuickFixLine  ->  Search
<
You must specify whether your highlight group definitions apply to a dark or
a light background. You do so with a `Background` directive, e.g.:
>
  Background: dark
<
This must appear before the first highlight group is defined. All the
highlight groups defined after a `Background` directive until the end of the
file or until another `Background` directive are assumed to refer to the
specified background. The only allowed values are `dark` and `light` (all
lowercase).

If there is only one `Background` directive in the template, the generated
colorscheme will have a command to set the background accordingly, e.g.:
>
  set background=dark
<
If there are two directives (or more), with dark and light values
respectively, the generated colorscheme will adapt to the current background,
e.g., the generated code will be:
>
  if &background ==# 'dark'
    " Dark variant of the colorscheme
  endif
  if &background ==# 'light'
    " Light variant of the colorscheme
  endif
<
Colortemplate also offers the possibility to add custom code to the
colorscheme. Code between `verbatim` and `endverbatim` is copied (almost)
verbatim into the output. The exception is that you may still use your color
names by prepending an @ sign. Such names will be interpolated and replaced by
suitable color values. For example:
>
  verbatim
  if get(g:, 'fancyflag', 0)
    hi! Normal ctermfg=@red guifg=@red gui=NONE,undercurl guisp=@yellow
  endif
  endverbatim
<
might be translated into something like:
>
  if get(g:, 'fancyflag', 0)
    hi! Normal ctermfg=88 guifg=#ff6400 gui=NONE,undercurl guisp=#ffff00
  endif
<
This allows you to get fancy. If you plan to submit your colorscheme for
inclusion in Vim, do not get fancy.

Finally, lines starting with `#` are interpreted as comments.

==============================================================================
Colortemplate options		       	*colortemplate-options*

						*g:colortemplate_use16*
If you want to use the shell's 16 color palette instead of the standard 256
colors, set this variable to 1, then generate the colorscheme with
|:Colortemplate| as usual.

==============================================================================
Colortemplate command		       	*:Colortemplate*

Use this command to create a Vim colorscheme from a colortemplate file. If you
use the command without any argument, the colorscheme is created in a new
buffer, but it is not saved. The command takes an optional argument, which is
the path where the generated colorscheme should be saved. If the file already
exists, you will get an error. Use `:Colortemplate!` to override an existing
file.

==============================================================================
Colortemplate functions			*colortemplate-functions*

				  *colortemplate#colorspace#approx()*
Finds the base-256 terminal color that best approximates a given color. For
example:
>
  echo colortemplate#colorspace#approx('#9e0006')
<
produces the following output:
>
  {'index': 124, 'delta': 3.751569, 'approx': '#af0000', 'color': '#9e0006'}
<
The keys of the output have the following interpretation:

- `color`: the input color;
- `approx`: the hex value of the terminal color that best approximates `color`;
- `index`: the terminal color index (a number between 16 and 255);
- `delta`: the ΔE* distance between the input color and its approximation.


				  *colortemplate#colorspace#colors_within()*
Returns a list of colors at distance less than the specified threshold from
the given color. For example:
>
  echo colortemplate#colorspace#colors_within(4.5, '#9e0006')
<
returns the list `[88,124]`.

				  *colortemplate#colorspace#k_neighbours()*
Returns the list of the k colors nearest to the specified color, for a given
k. For example:
>
  echo colortemplate#colorspace#k_neighbours('#9e0006', 4)
<
returns the list `[124,88,160,52]`.

				  *colortemplate#syn#toggle()*
Toggle the display of highlight group information for the highlight group
under the cursor.

vim:tw=78:ts=8:ft=help:norl:
