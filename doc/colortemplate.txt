==============================================================================
CONTENTS					*colortemplate-contents*

    1. Introduction ......... |colortemplate-intro|
    2. Getting started ...... |colortemplate-getting-started|
    3. Information block .... |colortemplate-info|
    4. Backgrounds .......... |colortemplate-background|
    5. Color definitions .... |colortemplate-colors|
    6. Highlight groups ..... |colortemplate-hi-groups|
    7. Verbatim blocks ...... |colortemplate-verbatim|
    8. Documentation blocks . |colortemplate-doc|
    9. Auxiliary files ...... |colortemplate-auxfiles|
   10. Include directive .... |colortemplate-include|
   11. Options .............. |colortemplate-options|
   12. Commands ............. |colortemplate-commands|
   13. Functions ............ |colortemplate-functions|
   14. Best practices ....... |colortemplate-best-practices|
   15. Providing feedback ... |colortemplate-feedback|

==============================================================================
Color templates				*colortemplate-intro* *ft-colortemplate*

A colortemplate file is designed to help users create their own colorschemes
without much effort. It can also be used to create colorschemes suitable for
distribution with Vim. Colorschemes created using a colortemplate have the
following features:

- they support 256-color terminals, true color terminals and GUI Vim;
- they have a consistent structure, they are guaranteed to follow best
  practices and they load quickly;
- they can be easily customised by the user;
- they are licensed under the Vim license by default.

==============================================================================
Getting Started				*colortemplate-getting-started*

To get started quickly, |:edit| `templates/dark.colortemplate`, which is
located in colortemplate's plugin folder, and type:
>
  :Colortemplate ~/.vim
<
This command opens a new tab with two windows: one window contains the
colorscheme derived from the template and the other window displays the
colorscheme's help file. Besides, both files are saved into the specified
directory (`~/.vim`), under the `colors` and `doc` directories respectively
(the directories are created by Colortemplate if they do not exist; files are
not overridden by default).

After generating the colorscheme with the command above, you may load it with:
>
  colorscheme dark
<
(That template uses only black and white, so it is not an outstanding theme.)

You may use `dark.colortemplate`, `light.colortemplate` or
`dark_and_light.colortemplate` as starting points for creating your own
colorscheme. The process is divided in five steps:

1. start by editing your colorscheme's information;
2. define a color palette;
3. define the necessary highlight groups;
4. document your colorscheme's options;
5. generate your colorscheme with `:Colortemplate`.

Lines starting with `#` are interpreted as comments. Comments are
ignored by Colortemplate and are not included in the generated colorscheme.

==============================================================================
General information				*colortemplate-info*

Information about a colorscheme consists of the following mandatory and
optional fields:
>
  # Mandatory information
  Full name:       A unique and attractive name
  Short name:      all_lowercase_with_no_spaces
  Author:          Myself <myself@somewhere.org>
  Maintainer:      Myself <myself@somewhere.org>

  # Optional information
  Website:         http://mysite.org
  Description:     A one line description
  License:         Public domain
  Terminal Colors: 256
  Option Prefix:   use_shortname_by_default
<
All the fields should be self-descriptive, The `Terminal Colors` field is
discussed further below. When the option prefix is not defined, Colortemplate
sets it equal to the short name.

==============================================================================
Colorscheme background				*colortemplate-background*

You must specify whether a template's highlight group definitions apply to
a dark or to a light background. You do so with a `Background` directive,
e.g.:
>
  Background: dark
<
This must appear before the first highlight group is defined. All the
highlight groups defined after a `Background` directive until the end of the
file or until another `Background` directive are assumed to refer to the
specified background. The only allowed values are `dark` and `light` (all
lowercase).

If there is only one `Background` directive in the template, the generated
colorscheme will have a command to set the background accordingly, e.g.:
>
  set background=dark
<
If there are two directives, one for dark and one for light background, the
generated colorscheme will adapt to the current background, e.g., the
generated code will be equivalent to:
>
  if &background ==# 'dark'
    " Dark variant of the colorscheme
  else
    " Light variant of the colorscheme
  endif
<
==============================================================================
Color definitions				*colortemplate-colors*

Color definitions consist of lines with the following syntax:
>
  Color: <name> <GUI spec> <base-256 spec> <base-16 spec>

For example:
>
  Color: white  #ffffff  206  White
<
The color name is an arbitrary string (only letters, numbers and underscore
allowed). Color definitions that appear before a `Background` directive are
assumed to apply to any background. Color definitions given after
a `Background` directive apply only to the specified background.

GUI color specifications may be given as hexadecimal values, as in the example
above, or as RGB values. Standard color names from `$VIMRUNTIME/rgb.txt` may
be used, too, although their use is discouraged:
>
  Color: white  rgb(255,255,255)  206  White
  Color: gold   dark goldenrod    136  Brown
<
Base-256 or base-16 specifications are used in terminals that do not support
true colors, or when |termguicolors| is not set. Whether your colorscheme
supports a 256 color palette, a 16 color palette, or both, is determined by
the value of the `Terminal` `Colors` field. The possible values are:

- `256`: the colorscheme falls back to an xterm's 256 color palette when true
  colors are not available or |termguicolors| is not set. 
- `16`: the colorscheme falls back to a 16 color palette (see |cterm-colors|)
  when true colors are not available or |termguicolors| is not set. This
  typically requires tweaking with terminal settings to choose a consistent
  palette, so this value is not recommended.
- `256,16`: the colorscheme falls back to a 256 color palette by default, but
  a 16 color palette may be enabled by setting `g:<colorscheme>_use16` to `1`,
  where `<colorscheme>` is the option prefix.
- `16,256`: the colorscheme falls back to a 16 color palette by default, but
  a 256 color palette may be enabled by setting `g:<colorscheme>_use16` to
  `0`. This value is not recommended.

In general, only the GUI value is mandatory. Base-256 values may be replaced
by a `~` symbol, which means that the color should be inferred automatically
from the GUI value. Base-16 values may be omitted entirely, unless you plan to
support the use of a 16 color palette. So, a minimal color definition might
look as follows:
>
  Color: black #000000 ~
<
It is recommended that you let Colortemplate compute the best color
approximations, and override the automatically generated values only if
necessary. Colortemplate adds a "color similarity table" to the output, which
contains a detailed summary of the generated color values, i.e., comments like
the following:
>
 " red: GUI=#9e0006/rgb(158,0,6) Term=88 #870000/rgb(135,0,0) [delta=4.473285]
<
Here, the delta value is the distance between the GUI value (`#9e0006`) and
the corresponding terminal color (`88`). The used distance is a sophisticated
variant of the CIELAB ΔE* metric, which takes into account the perceptual
characteristics of the human eye. Roughly speaking, colors at distance less
than 2.3 correspond to "just noticeable differences". The greater the
distance, the greater the discrepancy between GUI colors and their base-256
approximations.

Keep in mind that the "most similar" terminal color may not necessarily be the
"best looking" color, because the overall look&feel of a colorscheme
ultimately depends on the interactions among all the colors. Colortemplate
provides a few utility functions to help you experiment and find other good
(but not optimal in the sense of ΔE*) approximations: see
|colortemplate-functions|.

==============================================================================
Highlight group definitions			*colortemplate-hi-groups*

Highlight group definitions consist of lines with the following syntax:
>
  <Group name> <foreground color> <background color> <style attributes>
<
For example:
>
  SpellRare  white  black  bold,reverse guisp=cyan
<
Colors must be specified using the color names defined by the `Color`
directives.

The <style attributes> part of a highlight group definition is used to specify
comma-separated lists of attributes (see |attr-list|) and the special color to
use in the GUI. Both parts are optional, so the following are also valid
highlight group specifications:
>
  Normal    white   black
  DiffAdd   orange  blue   reverse
  SpellBad  white   black  guisp=red
<
The foreground and background colors must always be present. You may use the
special values `fg`, `bg`, and `none` for the default foreground color, the
default background color and for disabling the corresponding highlighting,
respectively.

Attributes specified as above are used for both |cterm| and |gui|
highlighting. If you want to use different values for the terminal and the
GUI, you must prepend `term=` or `gui=`, respectively, as is done in Vim color
schemes. For example:
>
  IncSearch  white  black  term=bold,reverse  gui=bold,standout
<
`term=` may be abbreviated `t=`, and `gui=` may be abbreviated `g=`. Instead
of `guisp=`, you may also use `s=`.

Linked groups are defined using the following syntax:
>
  <SourceGroup> -> <TargetGroup>

For example:
>
  QuickFixLine  ->  Search
<
==============================================================================
Verbatim blocks					*colortemplate-verbatim*

Colortemplate offers the possibility to add arbitrary code to a colorscheme.
Code between `verbatim` and `endverbatim` is copied (almost) verbatim into the
output. The exception is that you may still use your color names by prepending
an @ sign. Such names will be interpolated and replaced by suitable color
values. For example:
>
  verbatim
  if get(g:, 'fancyflag', 0)
    hi! Normal ctermfg=@red guifg=@red gui=NONE,undercurl guisp=@yellow
  endif
  endverbatim
<
might be translated into something like:
>
  if get(g:, 'fancyflag', 0)
    hi! Normal ctermfg=88 guifg=#ff6400 gui=NONE,undercurl guisp=#ffff00
  endif
<
If you need to interpolate a color that does not occur in a highlight group
definition, you must specify whether you want to interpolate a GUI value or
a terminal value by using `@gui<color>` or `@term<color>`, respectively, where
`<color>` is a color name. For example:
>
  let g:terminal_color_@termblack = '@guiblack'
<
might be replaced by something like:
>
  let g:terminal_color_16 = '#000000'
<
For templates that support both 16 and 256 color palettes, `@term<color>` will
be translated into a number in the preferred color space (determined by the
order of the values in the `Terminal Colors` directive). If you need to
refer to a specific colorspace, use `@term16<color>` or `@term256<color>`
instead.

==============================================================================
Documentation blocks				*colortemplate-doc*

Any settings that your colorscheme provides should be documented in
a documentation block. For instance, if you add a `g:mytheme_italic` flag to
toggle italics, you may document it as follows:
>
  documentation
  ===========================================================================
  @fullname Options                                *@shortname-options*
  
                                                   *g:@shortname_italic*
  Set to 1 if you want to enable italics.
  >
    let g:@shortname_italics = 0
  <
  enddocumentation

A documentation block starts with a `documentation` keyword and ends with
`enddocumentation`. Interpolation works as in verbatim blocks. So, for
example, `@fullname` is replaced by the value of the `Full Name` directive.
Names to be interpolated must be all lowercase and without spaces. Do not
hardcode your colorscheme's name into the documentation!

If the `Terminal Colors` field includes both `16` and `256` (in any order), an
option is automatically defined and documented by Colortemplate, which allows
the user to choose the preferred terminal color palette. The option's name is
`g:<colorscheme>_use16`, where `<colorscheme>` is the option prefix of your
template.

==============================================================================
Auxiliary files				       	*colortemplate-auxfiles*

If you need to create additional files, you may put their content into an
`auxfile` block. For example:
>
  auxfile autoload/airline/themes/mycolorscheme.vim
  " Anything can go here
  endauxfile

You must specify the path of the resulting file after `auxfile`. The content
of an `auxfile` block is interpolated as in verbatim blocks.

==============================================================================
Include directive		       		*colortemplate-include*

You may split your template into several files, and include snippets from one
file into another. You do so with an `Include` directive. For example, you
might put the documentation of your colorscheme into a separate template, say
`_help.colortemplate`, and include it into the main template as follows:
>
  Include: _help.colortemplate
<
The result is the same as if the content of `_help.colortemplate` had been
written at the inclusion point.

Conventionally, templates that are not meant to be used directly, but only
included into other templates, have names starting with an underscore.

You may include the same file more than once. This is useful, for example, if
you have highlight group definitions that are common to a dark and light
background. Then, you may put them into a `_common.colortemplate` file, and
include it twice:
>
  Background: dark
  Include: _common.colortemplate
  # Other definitions specific to dark background
  Background: light
  Include: _common.colortemplate
  # Other definitions specific to light background
<
NOTE: beware cyclic inclusions, which will cause Colortemplate to run an
infinite loop!

==============================================================================
Colortemplate options		       		*colortemplate-options*

						*g:colortemplate_no_aux_files*
Set to 1 if you do not want to generate any auxiliary file (including the help
file).
>
  let g:colortemplate_no_aux_files = 0
<
						*g:colortemplate_no_doc*
Set to 1 if you do not want to generate the help file.
>
  let g:colortemplate_no_doc = 0
<
						*g:colortemplate_no_warnings*
Set to 1 if you want Colortemplate to report only errors.
>
  let g:colortemplate_no_warnings = 0

==============================================================================
Colortemplate command		       		*colortemplate-commands*

						*:Colortemplate[!]*

Use this command to create a Vim colorscheme from a template. If you use the
command without any argument, the colorscheme is created in a new buffer, but
it is not saved. The command takes an optional argument, which is the path of
the directory where the generated colorscheme, its documentation and any
auxiliary files must be saved. To override existing files, use
`:Colortemplate!`.

==============================================================================
Colortemplate functions			*colortemplate-functions*

  				  *colortemplate#colorspace#approx()*
Finds the xterm's terminal color that best approximates a given color. For
example:
>
  echo colortemplate#colorspace#approx('#9e0006')
<
produces the following output:
>
  {'index': 124, 'delta': 3.751569, 'approx': '#af0000', 'color': '#9e0006'}
<
The keys of the output have the following interpretation:

- `color`: the input color;
- `approx`: the hex value of the terminal color that best approximates `color`;
- `index`: the terminal color index (a number between 16 and 255);
- `delta`: the ΔE* distance between the input color and its approximation.


				  *colortemplate#colorspace#colors_within()*
Returns a list of xterm's colors at distance less than the specified threshold
from the given color. For example:
>
  echo colortemplate#colorspace#colors_within(4.5, '#9e0006')
<
returns the list `[88,124]`.

				  *colortemplate#colorspace#k_neighbours()*
Returns the list of the k xterm's colors most similar to the specified color,
for a given k. For example:
>
  echo colortemplate#colorspace#k_neighbours('#9e0006', 4)
<
returns the list `[124,88,160,52]`.

				  *colortemplate#syn#toggle()*
Toggles the display of highlight group information for the highlight group
under the cursor. For example:
>
  vimVar ⊂ vimFuncBody xxx vimVar → Identifier    fg=14/#00aba5    bg=/
<
From left to right, this shows:

- the nesting of highlight groups (`⊂`);
- a sample of how the text looks like with the current hi group (`xxx`);
- the hi group to which the current hi group resolves, if any (`→`);
- the terminal/GUI values of the foreground and background color.

==============================================================================
Best practices					*colortemplate-best-practices*

Here are some guidelines to develop outstanding hackable colorschemes:

- Give each of your colors a distinctive name.

- Do not use too many colors. Probably, six-height colors are already enough.
  Sixteen are plenty.

- Prefer falling back to a 256 color palette when true colors are not
  available. Although not all xterm color palettes are the same, and your
  colorscheme may not look that great with only 256 colors, this provides the
  less unpredictable look. Relying on a terminal's 16 ANSI color palette in
  general results in colorschemes displaying arbitrary colors. If you really
  need to do that, use color names instead of numbers (see |cterm-colors|).

- Document all the options of your colorscheme.

- Do not define too many options. The ideal number of options for
  a colorscheme is… zero.

- Do not rely only on boldface, italics, or underlined text to visually
  distinguish an element: some setups do not support any of those.

- Visually check every part of your colorscheme. Use as many text samples as
  possible: string-heavy languages may look completely different from
  keyword-heavy ones. If you support transparent backgrounds, make sure to
  test your colorscheme both against an opaque and a transparent background.
  A few areas that are often overlooked include:

  a. The tabline (TabLine, TabLineFill, TabLineSel highlight groups). You may
     open a new tab with |tabnew|. See also |showtabline|.

  b. Folded text (Folded, FoldColumn). Set |foldcolumn| to a positive value to
     test the latter; for the former, create a buffer and execute:
>
       :set fdm=marker
<
     then type something like:
>
       {{{
       some text
       }}}
<
     Position the cursor on the text and use |zc| and |zv| to toggle the fold.

  c. The signs column (SignColumn). Try placing a sign as explained in
     |sign-commands|:
>
	:sign define piet text=>>
	:exe ":sign place 2 line=23 name=piet file=" . expand("%:p")
<
  d. The cursor's appearance (Cursor), especially with |cursorline| and
     |cursorcolumn| on. For this, you may need to use some GUI version of Vim,
     as most terminals override the cursor's color.

  e. Matching parentheses (MatchParen) and the cursor's appearance against
     them. Is the cursor clearly visible over a parenthesis? Is the matching
     parenthesis easily spotted? Even when |cursorline| and |cursorcolumn| are
     set?

  f. Search highlight (Search, IncSearch), especially with |cursorline| and
     |cursorcolumn| on. The Search and IncSearch highlight groups must be
     distinguishable: set |incsearch| and |hlsearch|, search for a pattern
     with multiple occurrences and move among them with CTRL-G and CTRL-T. Can
     you spot where the cursor is?
     With |cursorcolumn| and |cursorline| on, the highlighted column and
     cursor line should "pass behind" highlighted search results. You may
     achieve that effect by adapting the following snippet:
>
       Background:dark
       Color:black  #000000 ~
       Color:white  #ffffff ~
       Color:grey   #404040 ~
       Color:yellow #b58900 ~
       Normal       white  black
       CursorLine   none   grey            # No foreground color
       CursorColumn none   grey            # Ditto
       Search       yellow fg    reverse   # Use reverse
<
  g. Diffs (DiffAdd, DiffChange, DiffDelete, DiffText). Open two buffers in
     a split window and execute |diffthis| on both of them.

  h. The completion menu (Pmenu, PmenuSbar, PmenuSel, PmenuThumb). A simple
     way to test that is to define a dictionary: 
>
       :set dictionary=/usr/share/dict/words
<
     then type something like `vi`<c-x><c-k>. Scroll through the entries with
     CTRL-N and CTRL-P to make sure that the sidebar is properly visible.

  i. Line numbers (LineNr, CursorLineNr). Set |number| and check that
  everything looks right.

- Execute:
>
    :set showtabline=2 laststatus=2
    :vsplit
<
  Do the statuslines (StatusLine, StatusLineNC), the tabline (see above), and
  the vertical split (VertSplit) merge harmoniously or do they appear like
  disconnected components?

- Avoid defining filetype-specific highlight groups as much as possible. They
  override ftplugin definitions causing highlighting to be messed up after
  switching colorschemes. For example, suppose that the Vim filetype defines
  vimCommand to be a link to Statement. If your colorscheme sets vimCommand's
  attributes, after switching away from your colorscheme vimCommand will be
  cleared, and not restored to a link to Statement as you might expect. Even
  resetting the filetype will not fix that. If you link vimCommand instead,
  the linking will persist after switching to another colorscheme (so, again,
  the default link will not be restored), which will likely result in
  a different highlighting than expected. If you absolutely need
  filetype-specific highlight group definitions in your colorscheme, define an
  option that allows the user to turn them on/off (the default should be off):
>
    verbatim
    if get(g:, '@optionprefix_extra_hi_groups', 0)
    endverbatim
      " Filetype-specific highlight group definitions go here
    verbatim
    endif
    endverbatim
<
- Some users like to use a transparent background (e.g., with custom images)
  in the terminal. You may easily support that by adapting this snippet:
  >
   verbatim
   if !has('gui_running') && get(g:, '@optionprefix_transp_bg', 0)
   endverbatim
     Normal some_color none
     # Other definitions specific for transparency
   verbatim
   else
   endverbatim
     Normal some_color some_other_color
     # Other definitions specific for opaqueness
   verbatim
   endif
   endverbatim
<
  Do not forget to document `@optionsprefix_transp_bg`!

- Verbatim blocks and aux files allow you to get fancy. If you plan to submit
  your colorscheme for inclusion in Vim, do not get fancy.

- Finally, these online resources can help you design your colorscheme:

  - http://color.hailpixel.com/
    Play with hexadecimal colors
  - http://colourco.de/
    Similar concept, fancier implementation
  - http://www.colr.org/
    Extract a palette from an image
  - http://www.colourlovers.com/palettes
    User-created palettes
  - http://www.perbang.dk/color+scheme/
    A no-nonsense colorscheme generator
  - https://color.adobe.com/
    Adobe's fancy colorscheme generator
  - http://paletton.com/
    The classic 'Color Scheme Designer', rebranded
  - http://vrl.cs.brown.edu/color
    A very smart palette generator

  Kudos to Romain Lafourcade for collecting the links above!

=============================================================================
Providing feedback				*colortemplate-feedback*

For bug reports and feature requests please use:

    https://github.com/lifepillar/vim-colortemplate/issues

Pull requests are welcome, too!

vim:tw=78:ts=8:ft=help:norl:
